letter_uppercase      = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M"
                      | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"
                      ;

letter_lowercase      = "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m"
                      | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"
                      ;

letter                = letter_uppercase | letter_lowercase
                      ;

digit                 = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
                      ;

identifier            = letter , { letter | digit }
                      ;

numeral               = digit | ( numeral , digit )
                      ;

variable              = identifier
                      ;

arithmetic_operation  = "+" | "-" | "*"
                      ;

arithmetic_expression = ( "(" , arithmetic_expression , arithmetic_operation , arithmetic_expression , ")" )
                      | variable | numeral ;

boolean_operation     = "or" | "not"
                      ;

relational_operation  = "=" | "#" | "<" | "<=" | ">" | ">="
                      ;

boolean_expression    = ( "(" , boolean_expression , boolean_operation , boolean_expression , ")" )
                      | ( "not" , boolean_expression )
                      | ( arithmetic_expression , relational_operation , arithmetic_expression )
                      ;

statement             = "skip"
                      | ( variable , ":=" , arithmetic_expression )
                      | ( "(" , statement , ";" , "statement" , ")" )
                      | ( "if" , boolean_expression , "then" , statement , "else" , statement , "end" )
                      | ( "while" , boolean_expression , "do" , statement , "end" )
                      | ( "var" , variable , ":=", arithmetic_expression , "in" , statement , "end" )
                      | proc_decl
                      | proc_call
                      ;

arg_list              = variable
                      | ( arg_list , "," , variable )
                      ;

proc_decl             = "procedure" , identifier , "(" , arg_list , ";" , arg_list , ")" , "begin" , statement , "end"
                      ;

proc_call             = identifier , "(" , arg_list , ";" , arg_list , ")"
                      ;